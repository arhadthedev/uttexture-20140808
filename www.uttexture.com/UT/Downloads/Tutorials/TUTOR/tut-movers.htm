<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2 FINAL//EN">

<HTML>
<HEAD><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">

<TITLE>Second Edition</TITLE>
<CENTER>
<META NAME="Generator" CONTENT="NetObjects Fusion 3.0.1 for Windows">

</HEAD>

<BODY  BGCOLOR="#000000" LINK="#FFFFCC" VLINK="#FF9966" TEXT="#FFFFFF" TOPMARGIN=0 LEFTMARGIN=0 MARGINWIDTH=0 MARGINHEIGHT=0>

  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=752>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=8 HEIGHT =6><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =8 HEIGHT=1 BORDER=0></TD>
	<TD></TD>
	<TD WIDTH=162><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =162 HEIGHT=1 BORDER=0></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD HEIGHT =131></TD>
	<TD WIDTH=582><IMG id="Banner2" HEIGHT=131 WIDTH=582 SRC="../assets/images/auto_generated_images/movers_ElasticBanner.gif"  BORDER=0  ALT=" Movers and Dispatchers " ></TD>
	<TD></TD>
   </TR>
  </TABLE><TABLE CELLPADDING=0 CELLSPACING=0 BORDER=0 WIDTH=752>
<TR VALIGN="top" ALIGN="left">
<TD>

  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=131>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=8 HEIGHT =228><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =8 HEIGHT=1 BORDER=0></TD>
	<TD WIDTH=123>
	  <TABLE id="VerticalNavigationBar2" BORDER=0 CELLSPACING=0 CELLPADDING=0  WIDTH=123 >
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../index.html"><IMG id="NavigationButton85" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/index_AltElasticButton.gif"  BORDER=0  ALT=" Home " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/overview.html"><IMG id="NavigationButton86" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/overview_AltElasticButton.gif"  BORDER=0  ALT=" Overview " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/beginning.html"><IMG id="NavigationButton87" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/beginning_AltElasticButton.gif"  BORDER=0  ALT=" Starting " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/interiors.html"><IMG id="NavigationButton88" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/interiors_AltElasticButton.gif"  BORDER=0  ALT=" Interiors " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/exteriors.html"><IMG id="NavigationButton89" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/exteriors_AltElasticButton.gif"  BORDER=0  ALT=" Exteriors " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/triggers.html"><IMG id="NavigationButton90" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/triggers_AltElasticButton.gif"  BORDER=0  ALT=" Triggers " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/movers.html"><IMG id="NavigationButton91" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/movers_AltElasticButtonOn.gif"  BORDER=0  ALT=" Movers " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/skybox.html"><IMG id="NavigationButton92" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/skybox_AltElasticButton.gif"  BORDER=0  ALT=" Skybox " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/decorate.html"><IMG id="NavigationButton93" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/decorate_AltElasticButton.gif"  BORDER=0  ALT=" Decorations " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/inventory.html"><IMG id="NavigationButton94" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/Inventory_AltElasticButton.gif"  BORDER=0  ALT=" Inventory " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/monster.html"><IMG id="NavigationButton95" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/Monster_AltElasticButton.gif"  BORDER=0  ALT=" Monsters " ></A></TD>
	 </TR>
	 <TR VALIGN="top" ALIGN="left">
		<TD WIDTH=123 HEIGHT=19><A HREF="../html/summary.html"><IMG id="NavigationButton96" HEIGHT=19 WIDTH=123 SRC="../assets/images/auto_generated_images/Summary_AltElasticButton.gif"  BORDER=0  ALT=" URLs &amp; Notes " ></A></TD>
	 </TR>
	  </TABLE></TD>
   </TR>
  </TABLE></TD>
<TD>

  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=621>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=619 HEIGHT =32 COLSPAN=3>
<P ALIGN="CENTER"><FONT SIZE="-2" FACE="Arial,Helvetica,Univers,Zurich BT">ATTENTION: This work is copyright 1998 </FONT><A HREF="mailto:octpg1@ptinet.net"><FONT SIZE="-2" FACE="Arial,Helvetica,Univers,Zurich BT">Ron Andrade</FONT></A><FONT SIZE="-2" FACE="Arial,Helvetica,Univers,Zurich BT"> for Portal Special Edition. Do not duplicate for other than your own purposes or redistribute without the permission of the author: Ron Andrade (Gadget Factor)</FONT></TD>
	<TD></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=7 HEIGHT =19><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =7 HEIGHT=1 BORDER=0></TD>
	<TD WIDTH=611><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =611 HEIGHT=1 BORDER=0></TD>
	<TD WIDTH=1><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =1 HEIGHT=1 BORDER=0></TD>
	<TD WIDTH=2><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =2 HEIGHT=1 BORDER=0></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=621 COLSPAN=4>
<P ALIGN="CENTER"><FONT SIZE="-1" FACE="Bookman Old Style">Second Edition is Sponsored by</FONT></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD COLSPAN=4 HEIGHT =1></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=621 HEIGHT =54 COLSPAN=4><table width=621 height=54><tr align=left valign=top><td>

<center>
<!--Begin Flycast Ad Copyright 1998 Flycast Communications. All rights reserved. Patent Pending --> 
<SCRIPT LANGUAGE="JAVASCRIPT"> 
<!--
FlycastSite= "Mplayer";
FlycastPage= "WWIIROS";
FlycastWidth= 468;
FlycastHeight= 60;
FlycastPrintTag= true;
FlycastNewAd= true;
FlycastLoaded= false;
FlycastVersion= 1.1;
//--> 
</SCRIPT> 
<SCRIPT SRC="http://adex3.flycast.com/FlycastUniversal/" LANGUAGE="JAVASCRIPT"></SCRIPT>
<SCRIPT LANGUAGE="JAVASCRIPT"> 
<!-- 
if (FlycastLoaded) FlycastDeliverAd(); 
//--> 
</SCRIPT> 
<NOSCRIPT><IFRAME SRC="http://adex3.flycast.com/server/socket/127.0.0.1:2800/iframe/Mplayer/WWIIROS/123" scrolling="no" marginwidth=0 marginheight=0 frameborder=0 vspace=0 hspace=0 width=468 height=60><A target=_top HREF="http://adex3.flycast.com/server/socket/127.0.0.1:2800/click/Mplayer/WWIIROS/123"><IMG SRC="http://adex3.flycast.com/server/socket/127.0.0.1:2800/img/Mplayer/WWIIROS/123" border=0 width=468 height=60></A></IFRAME></NOSCRIPT> 
<!--End Flycast Ad Copyright 1998 Flycast Communications. All rights reserved. Patent Pending --> 
</center>
</td></tr></table>
</TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD COLSPAN=4 HEIGHT =16></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD HEIGHT =10432></TD>
	<TD WIDTH=611>
<P><B><FONT FACE="Arial,Helvetica,Univers,Zurich BT">This chapter will</FONT></B><FONT FACE="Arial,Helvetica,Univers,Zurich BT"> be a slight departure of the overall tutorial as presented thus far.</P>
<P></FONT><FONT FACE="Arial,Helvetica,Univers,Zurich BT">We will start by creating the main structure for section three of the DMArray map. Then, we will spend  this and the next chapter or two concentrating on a few details. It is important to note, though the Special Edition tutorials are considerably more in depth than most you have seen so far, these tutorials are specifically written in a vague pattern.</P>
<P>The first and, perhaps second tutorials gave you specifics in terms of which buttons to click on and how many units tall or wide to make your brushes and even suggested which textures to use.  However, as we move along, you should be getting familiar with the routine. How to create a brush, how and when to intersect or deintersect, etc.</P>
<P>In this chapter, we will again jump into verbose mode. meaning, absolute specifics will be provided. The intent is not to build your objects for you, rather it is to show you how it greatly helps to plan ahead in these situations. Another reason for the specifics is to allow your rendered model to appear and work as closely as possible with the sample provided </FONT><A HREF="../assets/images/05a.unr"><FONT FACE="Arial,Helvetica,Univers,Zurich BT">here</FONT></A><FONT FACE="Arial,Helvetica,Univers,Zurich BT"> and </FONT><A HREF="../assets/images/05b.unr"><FONT FACE="Arial,Helvetica,Univers,Zurich BT">here</FONT></A><FONT FACE="Arial,Helvetica,Univers,Zurich BT">. A note: these were built in haste, and do not example the attention to detail you must strive for. One of the bolts can be seen moving thriough the wall. To exit a mover room, jump while moving forward through the doorway.</P>
<P>Now, on with the show...</P>
<P>A very quick recap: You should now have a large (tall) outdoor area, with a lake and a plateau on high. Slightly above the plateau is the top portion of your &quot;array&quot; - a structure intended to resemble an antenna array of sorts. In your map, you also have a diversionary area that is accessible by the player through the lake itself. This area really has no purpose other than to enlarge our map for DeathMatch play and to add to the story or puzzles in single-player games.</P>
<P>We will add an additional &quot;in-ground&quot; location that will serve an important purpose in DM games - but no real purpose in single-player games ... unless you decide to give it a purpose.  :-)</P>
<P>Locate a cliff wall with a good view of the antenna dish. The further away, the better. Especially if the player can look down onto the top of the plateau. Imagine a room inside the rock - with a tiny opening for sniping at the dish or plateau. This is the purpose of area three.</P>
<P>When you have found an ideal location, create a room inside the rock - just on the other side of the cliff. Do not allow it to &quot;punch&quot; through. This will require subtracting your brush from the solid universe. The size of the room itself does not really matter - but create one with two-story ceilings and enough room to really move around if more than one player were to duke it out in here. Hint: Two stories will be approximately 200 units.  :-)</P>
<P>Create an other brush - very small, but large enough that a player can jump through in an emergency - remember, some players are very large and wide. Use the brush to create an opening or window in the side of the cliff. A location where a player inside the room can see out to the dish and possibly the plateau.</P>
<P>Now, let's duplicate the large room (click once on the tan outline of the large room and press CTRL-W to duplicate) - and move it down - way down so  it is level with either the plateau or the floor of your valley. The actual position does not matter because there will be no doors that allow access to this area. This whole underground location can only be accesses by a <I>portal</I> - which we will be covering in the next chapter. For now, try to enure the duplicate room is exactly beneath the original room. Use your top axis view to align the rooms. Now might be a good time to take another look at the tool bar (alignment tools)  :-) Press the F8 key and rebuild the geometry without Auto BSP - this will allow UnrealEd to know you have duplicated the room.</P>
<P>At this point, feel free to add any additional rooms or other structural decoration - but do not connect these two rooms and ensure one side is completely clear of any obstructions - for example: a large elevator that happens to be a similar size as the first two rooms.</P>
<P>Now we will begin our excruciating detail...</P>
<P>First, an explanation of the plan and  caveats. When creating a map that will include what we are getting ready to create, it is always a very good idea to have a very good idea of what you want. You should see clearly, in your mind's eye, what the player will see. Then, you have to construct the methodology in your mind based on what you know and your understanding of how the mechanical portion of Unreal and, hence, UnrealEd works.</P>
<P>What will be seen: The player, after entering the lower room via a portal will be presented with a large room, or perhaps several large hallways. Other than the portal itself, there is only one exit - a very heavy and intricate looking door.</P>
<P>When the player passes through the door, he will enter into another room. However, this room will have only a single exit: the door the player came through. Though, when the player reenters the door, he will find himself back in the first room, but there will be a window and  the portal. The portal will lead to a different location where the player entered from.</P>
<P>Explanation: The player, upon entering the first room will have nowhere to go but the single door at the other end. When the player realizes it is a &quot;dead-end,&quot; he returns to the first room - but he is in fact in the third room - the one way above the first room.</P>
<P>Construction: This will obviously be done with three main rooms - two are stationary and one is really an elevator. If the moving room has no sound, the player should not realize he is moving. Thus, we create the effect that the <I>rest of the world</I> has changed.</P>
<P>Caveats: In a multi-player game, what will happen if a second player tries to enter the elevator room when it is in the other position? What if a player is at the top and another player is at the bottom and both wish to enter the &quot;third&quot; room? How will we hide the fact that the third room moves - since the door will not move with the room?</P>
<P>This brings us to synchronized and coordinated movers. There is no such thing in UnrealEd - you have to use your own creativity. So, here is how we will do it:</P>
<P>Solution: The doors in rooms one and two will actually &quot;open&quot; in the closed position and &quot;closed&quot; in the open position. Key frame 0 will be open and key frame 1 will be closed. This means the doors will remain open, until they are triggered.</P>
<P>To keep the player from noticing the movement (the area where the door is will be seen as the room moves) - we will have the room move at an incredible speed (about one second - or faster) - and dim the lights for that period. This will confuse the player just enough to allow you to move him from one location to the next.</P>
<P>To allow anyone at anytime to move up or down - you will create <I>two</I> moving rooms - they will alternate in position. This will allow a room to be available in the up or down position at any time. Also, to ensure the player is not near the door when the room moves - a switch will be placed at the opposite end of the room. The switch will activate the movement.</P>
<P>The doors themselves will be intricate pieces of machinery. Each door will have several moving parts - giving reason for a slower-than-normal opening operation. This will slow things down in the players' perception, allowing that one-second movement to be hardly noticeable if at all.</P>
<P>There. You now have your orders - go create it and e-mail it to this author for your grade.</P>
<P>OKAY - just kidding!  :-)</P>
<P><IMG id="Picture2" HEIGHT=122 WIDTH=162 SRC="../assets/images/05a1.gif"  VSPACE=0 HSPACE=6 ALIGN=LEFT BORDER=0  ALT="05a1" >We already have our stationary rooms. One end of those rooms (in the universe area) should be completely clear of obstructions. Use a cube brush and create a large hollow area at this end. The area should be ridiculously large. The player will never see it, so do not be concerned with textures or any of that. <IMG id="Picture3" HEIGHT=225 WIDTH=309 SRC="../assets/images/05a2.gif"  VSPACE=0 HSPACE=6 ALIGN=RIGHT BORDER=0  ALT="05a2" ></P>
<P>Now, you cannot simply move a room. You need to create a mover that looks like a room - basically and very large elevator. Click once on one of your existing rooms and duplicate. Move the duplicated room into the large hollow area. We will call this area the &quot;mover space.&quot;</P>
<P>Create a cube brush of similar size to your original rooms. Set the cube brush to be hollow with a wall thickness of 4 or 5. Create the cube inside the mover space. Resize your cube to be approximately 100 units tall by 100 units wide and set the breadth to be deep enough to penetrate the wall of this new room completely.</P>
<P>Place the cube where the door should go and perform an intersection. Then click the subtract from world tool. You now have a threshold where the door will go. Do not add any lights to this room. Even though we have not covered lighting, this author knows how many of you out there like to jump the gun.  :-)</P>
<P>Click the cube brush tool to recreate your brush. It should return to the last dimensions you used. Move the brush to the location of your fixed room where the door will go. Keep in mind, you will be matching this doorway to the doorway in the moving room. Repeat for the other fixed room. Intersect and subtract. These doorways will actually open into the mover space. When the mover room is placed flush against the wall - the player will not have an opportunity to see the mover space itself.</P>
<P>At the opposite end of the room, create a diversion switch - something that looks like a button or switch that the player will assume is a button or switch. (Note - the sample map provided with this chapter does not include the &quot;dummy&quot; switch.) Also, you should set the texture properties of the dummy switch to be <I>unlit.</I> This will allow the switch to glow in the dark.</P>
<P>Encompass the mover room with a cube, intersect and mover your intersected brush off to the side.</P>
<P>From <B>BRUSH</B> menu, choose SAVE AS. Give your brush a name, such as MoverRoom. This is only as a precautionary step. In case we need to create another room later on.</P>
<P>Click on the original mover room you used to create the brush with - press the delete key to remove it. Do the same for the doorway you created. Confirm the prompts. Using your custom brush, create a mover object by clicking on the MOVER tool.</P>
<P>Position the mover room so the doorway lines up with the doorway on the lower fixed room. Note: there may be a very slight overlap in the walls. This is not only fine, but recommended. It ensures no portion of the mover space will be seen by the player while the mover room is in its stationary position.</P>
<P>Using your brush, create a second mover and position it against the other fixed room. You will have two identical movers - each placed against two identical rooms.</P>
<P>Now a quick word about synchronized and coordinated movers. These two mover rooms will be <I>synchronized</I> movers. If you were to jump up and down, your feet will leave the ground together and touch the ground together. This is a good example <I>synchronization.</I> If you are running or walking, this is an example of <I>coordination.</I> While jumping, your feet and legs are moving together. It doesn't matter what they are doing or in which direction they are going - they are in motion at the same time.</P>
<P>In coordination or it could even be called &quot;cooperation&quot; - your feet are working with each other as you walk, but they do not move at the same time. One foot is firmly on the ground before the other begins to move.</P>
<P>These mover rooms will be synchronized so they move simultaneously and in conjunction with one another. In order to prevent these rooms from passing through each other (and providing a truly weird effect for the player) - you will need to create multiple key frames to cause them to move <I>around</I> each other.</P>
<P>The first position where the mover is placed is key frame zero. Do not move the mover without selecting a new key frame, or the new position will become the current key frame. For simplicity's sake, the bottom mover room will slide straight up to the upper fixed room. The top mover room will move toward the rear of the mover space as it comes down to the lower fixed room.</P>
<P><IMG id="Picture4" HEIGHT=226 WIDTH=319 SRC="../assets/images/05b.gif"  VSPACE=0 HSPACE=6 ALIGN=RIGHT BORDER=0  ALT="05b" >Right-click on the top mover room and select key frame one. Reposition the mover room to the rear of the mover space - about halfway down. Try to ensure there is enough space for the bottom mover room to move past. Right-click the bottom mover, select key frame one and position it halfway up the mover space. Vertically speaking, both mover rooms should be level with each other - and they should not be touching each other.</P>
<P>For each mover room, select key frame two and position it to the opposite fixed room, as snugly as before. Right click each mover and select key frame zero to put it back to its starting position.</P>
<P>Right click the first mover room and open it's properties box. Leave the sound alone and set it's object settings to the INITIALSTATE &gt; TRIGGERTOGGLE property.</P>
<P>In the MOVER setting, set the <B>NUMKEYS</B> to 3 (the number of key frames to use) - leave all other settings here at their defaults (unless you wish to radically speed-up the mover)  :-)</P>
<P>In the EVENTS setting, leave EVENT at &quot;None&quot; and set the TAG to MoverRoom.</P>
<P>Close the properties box and open the properties box for the second mover room. Set all the properties for the second mover room to the exact same settings - especially the TAG setting.</P>
<P>Select CLASSES &gt; TRIGGERS &gt; TRIGGER from your object library. With your camera view, position  your viewpoint inside the bottom mover room. Right-click on the floor, near the entrance of the mover room where the door is. Add your trigger there. Double-click on the trigger to open the properties box and set the properties as follows:</P>
<P><B>TRIGGER:</B> Leave defaults</P>
<P><B>SOUND:</B> Set an ambient sound if desired</P>
<P><B>EVENTS:<BR></B>TAG doesn't matter<BR>EVENT should be the same name as the TAG of each mover room: MoverRoom</P>
<P>All other settings can remain with their defaults. Using your top axis view, move the trigger into the room right next to your &quot;dummy&quot; button. The proximity trigger should activate when the player enters the room and wanders into the vicinity of the switch or button. Because this is a proximity trigger, interesting effects will be seen every time a player wanders near the trigger. </P>
<P><B><I>Creativity Tip:</I></B> If you do not desire the &quot;randomness&quot; of the mover as presented with a proximity trigger, try creating an additional mover. This one acting as a button or switch that become animated when the player bumps into it - and this new button mover triggers the gate.</P>
<P>Since the movement is so fast, movement will be completed by the time the player realizes the there is only one exit. Even after he has been here a few times, it may still take him a while to really understand what it going on. (evil grins unite!)  :-)</P>
<P><IMG id="Picture5" HEIGHT=234 WIDTH=132 SRC="../assets/images/05c.gif"  VSPACE=0 HSPACE=6 ALIGN=LEFT BORDER=0  ALT="05c" >Duplicate the trigger and place it in the same position in the upper mover room.</P>
<P>Two triggers, each triggering both rooms. This is synchronization.</P>
<P>A single trigger activates all associated movers at the same time. </P>
<P>At this point, our mover rooms are basically complete. Note: the triggers that are in place now, when completed, will not actually initiate the room movement. We have it set that way for now. Make a note that you will come back to these triggers to reset them. They will eventually close the doors and the doors will trigger the rooms. Now to solve the problem of the gaping hole that will be left behind when the movers are in motion - the first set of doors. These doors are to prevent any other players from falling into the mover space while the mover rooms are in motion.</P>
<P>The first set of doors will be very plain - nothing special. Though we still need to pay attention to detail, it should be noted these doors will be visible for a <I>very</I> brief time. Your player may even be considered &quot;lucky&quot; to see them. The sole purpose of these doors is to provide an impassable barrier to &quot;protect&quot; the player from the mover space.</P>
<P>Create  a simple cube mover - about 100 units high and wide and about 5 or 10 units thick. Place key frame zero at the very edge of the fixed room's entrance into the mover room. <B>However</B>, set the door in an &quot;open&quot; position so the player can pass through. Set key frame one to be in a <I>closed</I> position. Key frame zero = &quot;open door&quot; and key frame one = &quot;closed&quot; door. In the door's properties, set the sound and movement speed as desired. Speed should be <B><I>very</I></B> fast - less than one second. A good example might be &quot;.25&quot; or even less. For this reason - you may not wish to include a sound. Set the Stay Open Time to 1 (one second) or whatever time you have set for the movement of your mover rooms. The doors and your rooms should be synchronized - they move together. Also, be sure the object is set to Trigger Open Timed.</P>
<P>Also in this door's properties, set the EVENTS &gt; EVENT to &quot;MoverRoom&quot; and set it's TAG to &quot;Gate.&quot;</P>
<P>Create a second &quot;gate&quot; and perform the same steps - positioning it against the other fixed room.</P>
<P>When this is accomplished, double-click the triggers inside the mover rooms and reset their EVENTS to &quot;Gate.&quot; This allows the triggers to initiate the doors closing and the doors will initiate the room movement.</P>
<P>Our synchronized movers are now complete!</P>
<P>Now, for a little cosmetic makeup. To add an interesting effect, an intricately designed door in the threshold will have your players talking about your wizardry for years. Well, okay, maybe for a few days. Obtaining God status when it comes to level editing and design is not an easy task - and you are only as good as your last effort.</P>
<P>Before attempting to create a coordinated mover, you need to have a detailed design in your head. Because this author is very rusty at his telepathy and simply has not been practicing like the rules say, you will have to bear with the following description.</P>
<P>We will create a door with three moving parts. The goal is to give the door an appearance of absolute strength and security. The player's perspective should be that of awe - &quot;whatever is on the other side must be something I am not supposed to see...&quot; (okay, we all exaggerate at one time or another.)</P>
<P>This is also a tricky proposition because we need two of the same thing. Logic would dictate we completely assemble the first door, duplicate it and move the duplicate into position, then move the original into position. Unfortunately, all is not as simple as that. The mover is based on precise locations in 3D space. Meaning that when you select a key frame, that object's 3D coordinates are recorded. Select another key frame and the objects position is recorded again. You can move the object around, and wherever it ends up in position and rotation is where the object will be recorded as being for the current key frame.</P>
<P>Thus, the proper way to accomplish this unique task is to assemble the complete mover - and all its individual mover parts, position the entire assembly, then animate each mover.</P>
<P>In order to save time here, this door will be greatly simplified. It will be a &quot;heavy&quot; door with two &quot;dead-bolt&quot; beams holding it closed. It may be easier to explain the door in reverse order. The idea for this door will be somewhat like this: The door raises into the ceiling of the threshold to open. Before the door can open, the two heavy wood bars (dead-bolts) must slide out from the loops attached to the door. These slide horizontally into the walls of the threshold.</P>
<P>So the sequence will be like so: Door is activated, releasing the bolt-bars. The bolt-bars slide into the walls. The door rises into the ceiling. Obviously the door could be considerably more intricate. However, for the sake of this tutorial and this author's sanity, these three mechanisms should suffice in giving you a strong understanding of how to create these kinds of movers.</P>
<P>Remember, we need to create the entire assembly before animating any part of it. Locate a nice open area inside your mover space. If you feel you need more room - create one. :-) That is to say, create a very large dummy room somewhere else in your universe - this room will serve no other purpose other than to give you plenty of working space.</P>
<P>Because each part of the coordinated mover must be created and modeled separately, the following order of construction is strictly a matter of personal preference. many will feel that modeling then converting to a mover, then assembling will be more efficient that modeling, converting and assembling piece by piece. We will use the former method.</P>
<P>First, we need to model the actual door. The door will simply be a flat square with loops attached where the bolts will go. Let's get started:</P>
<P><IMG id="Picture7" HEIGHT=270 WIDTH=103 SRC="../assets/images/05d1.gif"  VSPACE=0 HSPACE=6 ALIGN=LEFT BORDER=0  ALT="05d1" >The size of the threshold is exactly 100 units by 100 units. Create a cube brush that is 110 units Tall and wide - and about 20 units deep (we want this thing to look <I>really</I> heavy.)</P>
<P><IMG id="Picture8" HEIGHT=208 WIDTH=85 SRC="../assets/images/05d2.gif"  VSPACE=0 HSPACE=6 ALIGN=LEFT BORDER=0  ALT="05d2" >Select an appropriate texture and add the &quot;door&quot; to your workspace.  Resize your cube brush to 20 units tall and 10 units wide and leave the breadth at 20 units.</P>
<P>Place the brush halfway out of the door and two-thirds up from the bottom and about one fourth from the side of the door. Add the cube. Add a second cube about one fourth from the opposite side, but level with the first. Now, move the brush out of the way. Hold the CTRL key and select both cubes. Duplicate them and move them down to one-third from the bottom. Press the F8 key to rebuild geometry.</P>
<P><IMG id="Picture9" HEIGHT=206 WIDTH=79 SRC="../assets/images/05d3.gif"  VSPACE=0 HSPACE=0 ALIGN=RIGHT BORDER=0  ALT="05d3" ><IMG id="Picture10" HEIGHT=319 WIDTH=198 SRC="../assets/images/05d4.gif"  VSPACE=0 HSPACE=6 ALIGN=RIGHT BORDER=0  ALT="05d4" >Resize your cube brush to a height of 16 and a width of 110. Leave the breadth alone at 20. Position the brush so it runs horizontally &quot;through&quot; two of the cubes you have created. The brush will be recessed into the door slightly. Be sure there are a few units left on the bolt loops at the top, bottom and front. Click the subtract from world tool. Your loops now look like loops. Note: you may need to turn off the snap-to-grid feature by clicking on the snap-to-grid toggle tool.</P>
<P>Move your brush behind the door - and away from the door. Now click the add to world tool. You have just created the bolt that will fit into the bolt loop! </P>
<P>When you have all the prongs in place (the center prong will penetrate the bolt - but that's okay for now) - add a cylinder at the pivot end. Use a cone inside the cylinder to create the pivot point.</P>
<P>Now we have the two models needed to construct our door.</P>
<P>Use a cube to encompass the door section and intersect. Save your brush, then move it off to the side and create a mover. Repeat this process for the bolt - except you will create two bolt movers. Now, assemble the components of the mover to create a complete door.</P>
<P>When your door is completely assembled, it will contain three individual movers.</P>
<P>Create a cube that encompasses the entire assembly. Click the select all inside tool and move the assembly into position - at the entrance to the bottom mover room (from the fixed room.) Set the door assembly into the entry way so the threshold shows somewhat.</P>
<P>Now animate the assembly: Move the top bolt on the assembly in one direction and the bottom bolt to the opposite direction. This makes for a more fluid movement. Again, remember to select key frame one before repositioning the mover. You may want to leave just a bit showing. This way, the player should not notice that there is no hole for these beams to actually slide into.  :-)</P>
<P><IMG id="Picture12" HEIGHT=290 WIDTH=110 SRC="../assets/images/05k.gif"  VSPACE=0 HSPACE=6 ALIGN=RIGHT BORDER=0  ALT="05k" >Next, move the door all the way into the ceiling of the threshold. Now, create a cube brush that fits snugly over the door in the ceiling - but do not perform an intersection. When the brush is positioned as desired (completely encompassing the door) - right-click on the door and select key frame zero. This repositions the door at key frame zero (closed) and leaves the cube brush. Click the subtract from world tool to create an opening where the door will go into while it is open (since this will be obvious to the player.)</P>
<P>Under normal circumstances, the level editor will decide to control this door via event/tag keywords. Similar to the way you have configured the mover rooms. However, for coordinated movers, there is a much better way. Allow us to introduce you to the <B><I>Dispatcher</I></B>. The Dispatcher is a trigger that allows precise control over several movers. Unlike the previous example, where several triggers activate several movers simultaneously, the Dispatcher allows you to perform the same tasks with far better management and far greater control over delays and timing. We will cover the dispatcher momentarily.</P>
<P>For now, let's continue configuring our door assembly.</P>
<P>Before we begin editing these movers' properties, let's decide now what we want to edit: We will set the bolts to move at a speed of one second and the door itself will take 3 to 4 seconds to open. The door will crush a player if he gets in the way. The door will remain open for 2 seconds (let's add a little excitement here.)</P>
<P>Each mover, except the door, should be in it's respective opened location - this will make it easier to select each and edit their properties. Note: except for the door, which is already at key frame zero, it is a good idea to reset each mover back to key frame zero when you have completed editing its property values. This will help to keep you oriented and move the elements &quot;out of the way&quot; after editing. Yes, we are only working on a simple three-piece mover, but these are good habits to develop now.</P>
<P>Right-click the door to bring up its properties box and set the following (remember to take notes):</P>
<P><B>SOUND:</B> Ambient sound: Set this as desired<BR><B>OBJECT:</B> InitialState: TriggerOpenTimed<BR><B>MOVERSOUNDS:</B> Set all these properties as desired<BR><B>MOVER:</B> MoverEncroach: ME_CrushWhenEncroach<BR><B>MOVER:</B> MoveTime: 3<BR><B>MOVER: </B>StayOpenTime: 2<BR><B>EVENTS:</B> Event: None<BR><B>EVENTS: </B>Tag: HeavyDoor</P>
<P>Close the properties box and select your first bolt (beam.)</P>
<P>Set these properties for each bolt:</P>
<P><B>SOUND:</B> Ambient sound: Set this as desired<BR><B>OBJECT:</B> InitialState: TriggerOpenTimed<BR><B>MOVERSOUNDS:</B> Set all these properties as desired<BR><B>MOVER:</B> MoverEncroach: ME_IgnoreWhenEncroach<BR><B>MOVER:</B> MoveTime: 1<BR><B>MOVER: </B>StayOpenTime: 2<BR><B>EVENTS:</B> Event: None<BR><B>EVENTS: </B>Tag: Bolt</P>
<P>Now, select the standard trigger in the CLASSES section of your object library. Add the trigger directly in front of the door assembly and set it's EVENTS &gt; EVENT to <I>Dispatch</I> (or whatever you want.) Leave its tag setting at the default. Duplicate the trigger and place it on the other side of the door to allow a returning player passage through the door.</P>
<P>Viola! You now have a masterpiece of UnrealEd engineering! ... well, almost. Next to your trigger, add a <B>dispatcher</B>. The dispatcher trigger is located in your object library, in the classes section under &quot;triggers.&quot; After placing the dispatcher, double-click to open the properties box.</P>
<P>Only two settings apply (in our case): the EVENTS settings and the Dispatcher settings.</P>
<P><IMG id="Picture13" HEIGHT=542 WIDTH=351 SRC="../assets/images/05l.gif"  VSPACE=0 HSPACE=6 ALIGN=LEFT BORDER=0  ALT="05l" >First, set the EVENTS: TAG property to Dispatch (or whatever name you put in the Trigger's EVENT field earlier.) Leave the EVENT property alone (none.) Now, expand the DISPATCHER settings. There are two properties here: <I>OutDelayes </I>and <I>OutEvents.</I> Expand both these properties now.</P>
<P>OutDelays and OutEvents each have seven fields, numbered respectively 1 through 7. These two properties are directly linked. For example, data in field 5 of OutDelays corresponds directly to the data in field 5 of OutEvents. Let's first concentrate on OutEvents. These are the events you want triggered in order. For example, field zero should have the TAG keyword for our dead bolts. After all, the door would look mighty suspicious if it were to slide up into the ceiling before the bolts were removed. The keyword that goes here is Bolt.</P>
<P>Set field 1 to the keyword in the doors TAG: HeavyDoor.</P>
<P>Now, take a close look at the OutDelays property fields. This are self explanatory: the numbers here represent seconds, right? This is a correct assumption. However, a word of warning: When a mover triggers another mover, such as one door triggering another ... the first door will open, triggering the second door to open. The second door will remain open for the time specified (unless it is set to toggle) then the first door will close, completing its animation sequence.</P>
<P>The movers triggered by a dispatcher work differently: each mover will open and close according to its own properties. One mover will not wait for another mover to complete its cycle. The way the dispatcher works is pretty simple. It basically starts all movers assigned to it at the same time. The only difference is that the dispatcher can be instructed to delay the start of specified movers.</P>
<P>So, we will set the bolts to move immediately. Since the bolt tag (Bolt) is on field zero of the OutEvents property, we will leave field 0 set to zero in the OutDelays property. In other words, no delay at all. However, the door needs to wait for the bolts to clear the loops attached to the door before it can move. So a little math is in order here.</P>
<P>The bolts are set to move into the wall and wait there for four seconds. The time it takes the bolts to move from key frame zero to key frame one is 1 second. Therefore, the door should be delayed by at least 1 second. We will give it two for good measure. In field 2 of the OutDelays property, enter 2.</P>
<P>We now have a nicely choreographed opening door. unfortunately, this all presents a problem. Though the door will open as expected, the closing procedure will not be very pretty. The bolts will close long before the door comes down out of the ceiling. Thus, a minor change in the bolts' properties is in order. Close the properties box for the dispatcher. A red line should indicate your trigger is linked to the dispatcher, but there are no lines leaving the dispatcher to the other linked movers. This is normal. Note that the dispatcher itself can cause an event to trigger other trigger able items.</P>
<P>Holding the CTRL key, click on each bolt so both are selected. Right-click on one of the bolts and open the properties box. Since both bolts are selected, the properties you change here will apply to both movers. If a setting is different for each mover, it will appear <I>blank</I>. Changing a blank setting will cause the change to apply to all selected movers.</P>
<P>We need to simply change the StayOpenTime setting. Again, we need to consider what we are doing. The door is delayed for two seconds after the bolts have opened. Plus, the door takes three seconds to open and remains open for two more seconds. The door takes another three seconds to close.</P>
<P>Add all these seconds together: 2 + 3 + 2 + 3 = 10 seconds. In the MOVER setting, reset the  StayOpenTime to 10. You may even want to add an extra send or two. This should keep the bolts open long enough to provide sufficient time for the door to open, pause and close before the bolts return to their key frame zero state.</P>
<P>Now, when your player comes within the proximity radius of your trigger, the trigger will activate the dispatcher, which will activate your coordinated mover.</P>
<P>Now, to provide your player with access to and from this area. Yes, we said portals would be covered in the next tutorial, but we have reached this point in this tutorial ahead of schedule. So, let's move on, shall we?</P>
<P>First, ensure all movers are set to key frame zero. Rebuild your geometry and save your level. </P>
<P><B><I>Important note:</I></B> Portals can be very finicky and tricky to create and operate properly. A portal is that fantasy mirror that will take you to a different realm. In this case, walking through this &quot;magic mirror&quot; will take your player to a different part of your map. A portal can be two ways or one way. We will create a two-way portal. One portal will be located in your bottom fixed room. The other will be created on your plateau.</P>
<P>In the first fixed room, create a hollow cube and add it to your world. Resize your cube brush to its current size minus about 10 or 15 units. Place this new brush inside your cube and move it to one edge. This will be the entrance into this portal. Click the subtract from world tool to create the hollow space inside the cube. This &quot;closet&quot; will become your portal housing. It should be large enough for the player to enter completely. In other words, if you were to add a door to this closet, the closet will have enough room to hold the player with the door closed.</P>
<P>Take note that the floor of the room may or may not be flush with the floor inside the cube. If not, and the floor inside the cube is higher than 1 or two grid squares from the floor of the main room, you may want to add a set of stairs or other means by which the player can easily access this portal ... unless you intend to make it a small challenge. </P>
<P>Select all of this portal housing and duplicate it. Move the copy out onto the plateau somewhere. Remember, these two portals will be linked. </P>
<P><B><I>Creativity Tip:</I></B> You could even create a third, fourth or even fifth portal and have each portal link to the other, creating a &quot;ring-around-the-rosies&quot; type of loop. It would sure prove fascinating to watch your players figure it all out.</P>
<P>Now you will need to create a zone portal. This is the tricky part. It is important to remember that a plane brush has <B>two sides</B>, even though it is only one pixel thick. When a plane  is used as part of a portal - the sides <I>matter.</I> When you &quot;enter&quot; a portal, your are actually mirroring your self as you go through the plane.</P>
<P>This is difficult to explain, so please bear with the description below:</P>
<P>If a plane setup as a portal zone and is part of a transporting portal - one side allows you in <I>and </I>out. The other side is not used and will never be seen. So, if you have a portal that will transport the player from one location to another ... the portal entered will be <B>Portal A</B> and the portal where the player comes out will be called <B>Portal B</B>.</P>
<P>Regardless of which is which, the first portal you create in UnrealEd will include the &quot;master&quot; plane. The master plane is the first plane created in a set of portals. A set of portals are all portals that link to one another (more than two can be linked together.)</P>
<P>So, the master plane (the first one created) will have a side 1 (the side of the plane face out or away from the portal) and side 2 (the side of the plane facing into the portal..) When a player &quot;enters&quot; a portal - he is not really entering the portal housing. As soon as he touches side 1 of the plane - he immediately is placed in front of side 1 of the plane on the portal he is going to.</P>
<P>Think of each portal plane as a camera. The camera is facing away from the portal and sees everything  from the portals point of view. Everything in front of the plane is captured as an image and &quot;broadcast&quot; to the portal that leads to it. This is how Unreal shows the location of the other portal.</P>
<P>When a player runs &quot;into&quot; the camera, the player is instantaneously transported to the other portal and placed in front of that portal's camera - but facing away from the portal. This gives the player the impression of &quot;passing through&quot; the magic mirror.</P>
<P>Now, the reason for all that explanation: If side 1 of the master portal is facing away from the portal (Portal A) - then side one of Portal B's plane must be facing <I>into</I> the portal.</P>
<P>Now, with all the information ammunition, create a plane brush that fits tightly into the portal housing you have just created. You may even want some overlap.</P>
<P>Using the plane brush, create a single-pixel wall in the opening. Click the add special tool to add a zone portal. This portal can be invisible, transparent or non-transparent according to your preferences. Be sure the zone inside the cube is completely and tightly sealed.</P>
<P>Select a texture if desired, then click the add special tool and create a zone portal. Add a zone portal you your other portal housing (and all additional portal housings you may have created.) Using your camera view, maneuver into your first portal. In your object library, in the classes section, select INFO &gt; ZONEINFO &gt; WARPZONEINFO.</P>
<P>Right-click on the floor and add your WarpZoneInfo. Use your side or front axis view to position the warpzoneinfo so it is resting on the floor. Use your top Axis view to position the warpzoneinfo in the center of the housing and double-click.</P>
<P>In the properties box, set the WARPZONEINFO settings as follows:</P>
<P><B>DESTINATIONS:</B> (Ignore this)</P>
<P><B>OTHERSIDEURL:</B> This is the name of the portal where the player will be taken to.<BR>In this case, put &quot;P2&quot; here (without quotes.)</P>
<P><B>THISTAG: </B>This is the name of this portal<BR>In this case, &quot;P1&quot; (without quotes.)</P>
<P>Next, set the advanced property:</P>
<P><B>ADVANCED: bDIRECTIONAL</B> = TRUE</P>
<P>Close the properties box. You will notice the warpzoneinfo icon has an arrow pointing out of it. This was created when you set the directional tag to true. You rotate this arrow the same way as any other object. Rotate the warpzoneinfo icon so the arrow is pointing toward the <I>rear</I> of the portal housing.</P>
<P>Duplicate the warpzoneinfo icon and place the copy into your second portal housing. Rotate the arrow so it is pointing into the rear of the housing. Double-click the warpzoneinfo icon and set the OtherSideURL to the name of the portal the player will be taken to when he enters this portal. If you are linking only two portals, and you want a two-way portal, put the name of your first portal here. In this case: P1 - set the ThisTAG property to the name of this portal - in this case P2.</P>
<P>If you are creating a portal ring, simply put the name of your third portal into the OtherSideURL property. Then, in the third portal, put the name of the first portal into this property and so on. For a one way portal, simply leave the OtherSideURL property blank in one of the portals.</P>
<P>That's it. Your portals are now complete. <B>Special note:</B> when you test your map, your portal may react strangely. If this is the case, it is because the wrong side of one of your planes is facing the wrong way. Simply come back to UnrealEd - locate the first portal where you noticed this anomaly and rotate the zone portal 180 degrees. This should fix the problem. Also note: your portals may not work until you rebuild your geometry <I>with</I> the AutoBSP function turned on. Since we have not yet covered lighting, here is a quick way to add a little light for testing:</P>
<P>First, rebuild your geometry without AutoBSP and save your map. In Windows explorer - make a backup copy of your DMArray file - so if anything goes wrong, you can come back to this point.</P>
<P>Use your camera view to navigate your map and find the first location where you wish to place some light. Now, rebuild your geometry <I>with</I> the AutoBSP option turned on. Your map will become very dark.  From the classes section of your object library, select LIGHT. </P>
<P>Right-click on the ground in your camera view and place the light. It may not be very bright. Hit CTRL-W to duplicate the light until you feel the area is bright enough. Continue to navigate your map adding light this way until you feel you have enough to experiment with.</P>
<P>please keep in mind that these lights will not be permanent. They are only placed here for testing. When you are ready to test, rebuild your geometry using AutoBSP again. Do not save the file - press CTRL-P to play the map. As long as you do not save the file, it should remain intact and ready for the next chapter, which is, ironically, covering trivial things like lights.  :-)</P>
<P>If you do accidentally save your map - you should have a backup from which to restore.</P>
<P>In the next chapter we will deal with: <B><I>Lighting and illumination effects</I></B>.</FONT></TD>
	<TD COLSPAN=2></TD>
   </TR>
  </TABLE></TD>
</TR>
</TABLE>

  <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=0 WIDTH=752>
   <TR VALIGN="top" ALIGN="left">
	<TD WIDTH=131 HEIGHT =10><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =131 HEIGHT=1 BORDER=0></TD>
	<TD WIDTH=621><IMG SRC="../assets/images/auto_generated_images/clearpixel.gif" WIDTH =621 HEIGHT=1 BORDER=0></TD>
   </TR>
   <TR VALIGN="top" ALIGN="left">
	<TD></TD>
	<TD WIDTH=621>
<P ALIGN="CENTER"><A HREF="../html/triggers.html"><FONT SIZE="-1" FACE="Bookman Old Style">Previous Chapter</FONT></A><FONT SIZE="-1" FACE="Bookman Old Style"> | </FONT><A HREF="../index.html"><FONT SIZE="-1" FACE="Bookman Old Style">Home</FONT></A><FONT SIZE="-1" FACE="Bookman Old Style"> | </FONT><A HREF="../html/skybox.html"><FONT SIZE="-1" FACE="Bookman Old Style">Next Chapter</FONT></A><FONT SIZE="-1" FACE="Bookman Old Style"></FONT></TD>
   </TR>
  </TABLE></BODY>
</HTML>
